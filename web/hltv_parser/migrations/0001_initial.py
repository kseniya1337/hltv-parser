# Generated by Django 3.2.3 on 2021-06-18 16:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название')),
            ],
            options={
                'verbose_name': 'карта',
                'verbose_name_plural': 'карты',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hltv_id', models.IntegerField(verbose_name='id матча на hltv')),
                ('match_type', models.CharField(max_length=255, verbose_name='тип')),
                ('first_team_score', models.IntegerField(verbose_name='результат первой команды')),
                ('second_team_score', models.IntegerField(verbose_name='результат второй команды')),
                ('match_date', models.CharField(max_length=255, verbose_name='дата проведения')),
            ],
            options={
                'verbose_name': 'матч',
                'verbose_name_plural': 'матчи',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hltv_id', models.IntegerField(verbose_name='id команды на hltv')),
                ('name', models.CharField(max_length=255, verbose_name='название')),
                ('logo', models.CharField(max_length=510, verbose_name='логотип')),
            ],
            options={
                'verbose_name': 'команда',
                'verbose_name_plural': 'команды',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название')),
            ],
            options={
                'verbose_name': 'турнир',
                'verbose_name_plural': 'турниры',
            },
        ),
        migrations.CreateModel(
            name='MatchVeto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_action', models.IntegerField(verbose_name='номер выбора')),
                ('result', models.IntegerField(choices=[(0, 'Вычерк команды'), (1, 'Вычерк противника'), (2, 'Выбор команды'), (3, 'Выбор противника'), (4, 'Крайняя')])),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.map', verbose_name='карта')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.match', verbose_name='матч')),
            ],
        ),
        migrations.CreateModel(
            name='MatchMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(max_length=255, verbose_name='счет карты')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.map', verbose_name='карта')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.match', verbose_name='матч')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='first_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.team', verbose_name='первая команда'),
        ),
        migrations.AddField(
            model_name='match',
            name='second_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='hltv_parser.team', verbose_name='вторая команда'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament', to='hltv_parser.tournament', verbose_name='турнир'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
